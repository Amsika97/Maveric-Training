package com.training.org.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.validation.BindingResult;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import com.training.org.entity.Students;
import com.training.org.repository.StudentRepository;

import ch.qos.logback.core.model.Model;
import jakarta.validation.Valid;

@Controller
public class StudentsController {
	@Autowired    
	private StudentRepository studentRepository;
	 @GetMapping("/signup")
	    public String showSignUpForm(Students students) {
	        return "add-student";
	    }
	    
	    @PostMapping("/add")
	    public String addUser(@Valid Students students, BindingResult result, Model model) {
	        if (result.hasErrors()) {
	            return "add-student";
	        }	        
	        studentRepository.save(students);	        
	        return "redirect:/index";
	        
	    }
	    @GetMapping("/index")
	    public String showUserList(Model model) {
	        model.addAttribute("users", studentRepository.findAll());
	        return "index";
	    }
	    @GetMapping("/edit/{id}")
	    public String showUpdateForm(@PathVariable("id") long id, Model model) {
	        Students student = studentRepository.findById(id)
	          .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
	        
	        model.addAttribute("user", student);
	        return "update-user";
	    }
	    @PostMapping("/update/{id}")
	    public String updateUser(@PathVariable("id") long id, @Valid Students student, 
	      BindingResult result, Model model) {
	        if (result.hasErrors()) {
	        	student.setId(id);
	            return "update-user";
	        }
	            
	        studentRepository.save(student);
	        return "redirect:/index";
	    }
	        
	    @GetMapping("/delete/{id}")
	    public String deleteUser(@PathVariable("id") long id, Model model) {
	    	Students student = studentRepository.findById(id)
	          .orElseThrow(() -> new IllegalArgumentException("Invalid user Id:" + id));
	        studentRepository.delete(student);
	        return "redirect:/index";
	    }
}
