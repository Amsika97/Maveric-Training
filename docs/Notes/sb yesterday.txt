



1) In Eclipse, how can I start a Spring Boot project?
2) Describe how to use Maven to develop a Spring Boot application.
3) Explain the effect of Spring Boots.
4) Discuss the RAD model's many stages.
5) Describe the Spring Actuator and its benefits.
6) What exactly are startup dependencies?
7) Can you describe what occurs in the background when you Run as Java Application a Spring Boot Application?
8) Why was Spring boot created?
9) What is the procedure for running a Spring Boot app on a custom port?
10) What exactly is dependency management in Spring Boot?
11) What accurately is a spring boot actuator?
12) How Do You Deploy Spring Boot Web Apps as Jar and War Files?
13) How does one go about activating a new autoconfiguration with Spring Boot?
14) What exactly is Spring Boot CLI and what are its advantages?
15) What exactly is a Spring Initializer?
16) Would you use Spring Boot with non-Spring-based applications?
17) Describe the Spring boot modules.
18) Could you please list the Spring Boot starters that are available?
19) What exactly are Spring Boot's DevTools?
20) Can the integrated Tomcat server's port be changed in Spring Boot?
21) How do you make a war file in Spring Boot?
22) What precisely is a spring boot actuator?
23) Describe Thymeleaf and its application.
24) Describe Spring Data.
25) What exactly is a spring-boot-starter-parent?
26) What are actuators in Spring boots and why should you use them?
27) Describe your Spring Boot experience.
28) Can you describe how to use Spring Boot to deliver to a separate server?
29) What exactly is spring boot auto configuration?
30) Explain why Spring Boot DevTools are required.
31) What exactly is Thymeleaf?
32) What exactly is Spring Boot CLI and what are its advantages?
33) What exactly is dependency injection?
34) Would Spring Boot be used to create non-web software?
35) Mention the benefits of the YAML file over the Properties file, as well as the many ways to load the YAML file in Spring boot.
36) In Spring Boot, describe the RestMapping annotation.
37) How can I fix a Whitelabel error code in a spring boot application?
38) How is Hibernate selected as the default JPA implementation without any configuration?
39) Explain Spring Boot Administration
40) These are the most critical skills to have as a Spring Boot programmer.
41) Where should the boundaries of a transaction begin?
42) Why is componentScan used in class files?
43) Define the phrase Spring Initializer.
44) What exactly is bootstrapping in a spring boot?
45) In a Spring Boot application, where may you define properties?
46) What do you know about Spring Data?





package com.example.demo;

public class User {
	private String name;
	private String email;
	
	public User() {
		
	}
	public User(String name, String email) {
		super();
		this.name = name;
		this.email = email;
	}
	public String getName() {
		return name;
	}
	public void setName(String name) {
		this.name = name;
	}
	public String getEmail() {
		return email;
	}
	public void setEmail(String email) {
		this.email = email;
	}
	

}





package com.example.demo;

import java.sql.ResultSet;
import java.sql.SQLException;
import java.util.List;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.jdbc.core.RowMapper;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpringBootJdbcController {

	@Autowired
	JdbcTemplate jdbc;

	@RequestMapping("/insert")
	public String index() {

		jdbc.execute("insert into user(name,email) values ('java','java@gmail.com')");
		return "Data inserted successfully";
	}

	@RequestMapping("/list")
	public List < User > findAll() {
		return jdbc.query("select * from user", new StudentMapper());
	}
	
	class StudentMapper implements RowMapper < User > {
        @Override
        public User mapRow(ResultSet rs, int rowNum) throws SQLException {
        	
        	System.out.println("mapRow is called");
        	User std = new User();
            
            std.setName(rs.getString("name"));
            std.setEmail(rs.getString("email"));
            
            return std;
        }
    }
}















spring.datasource.url=jdbc:mysql://localhost:3306/springBootCRUD
spring.datasource.username=shital
spring.datasource.password=shital@123
spring.jpa.hibernate.ddl-auto=create-drop





<?xml version="1.0" encoding="UTF-8"?>
<project xmlns="http://maven.apache.org/POM/4.0.0" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 https://maven.apache.org/xsd/maven-4.0.0.xsd">
	<modelVersion>4.0.0</modelVersion>
	<parent>
		<groupId>org.springframework.boot</groupId>
		<artifactId>spring-boot-starter-parent</artifactId>
		<version>3.1.2</version>
		<relativePath/> <!-- lookup parent from repository -->
	</parent>
	<groupId>com.training.org</groupId>
	<artifactId>SpringBootWithMySQL</artifactId>
	<version>0.0.1-SNAPSHOT</version>
	<name>SpringBootWithMySQL</name>
	<description>Demo project for Spring Boot</description>
	<properties>
		<java.version>17</java.version>
	</properties>
	<dependencies>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-web</artifactId>
		</dependency>

		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-devtools</artifactId>
			<scope>runtime</scope>
			<optional>true</optional>
		</dependency>
		
		 <dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-data-jdbc</artifactId>
    </dependency>
		<dependency>
			<groupId>com.mysql</groupId>
			<artifactId>mysql-connector-j</artifactId>
			<scope>runtime</scope>
		</dependency>
		<dependency>
			<groupId>org.springframework.boot</groupId>
			<artifactId>spring-boot-starter-test</artifactId>
			<scope>test</scope>
		</dependency>
	</dependencies>

	<build>
		<plugins>
			<plugin>
				<groupId>org.springframework.boot</groupId>
				<artifactId>spring-boot-maven-plugin</artifactId>
			</plugin>
		</plugins>
	</build>

</project>





package com.example.demo;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.jdbc.core.JdbcTemplate;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RestController;

@RestController
public class SpringBootJdbcController {
	
	@Autowired
	JdbcTemplate jdbc;
	
	@RequestMapping("/insert")
	public String index() {
		jdbc.execute("insert into user(name,email) values ('java','java@gmail.com')");
		return "Data inserted successfully";
	}
}









create table user (name varchar(30),email varchar(30));
    
    
    
    
    
    
// application.properties
spring.datasource.url=jdbc:mysql://localhost:3306/springBootCRUD  
spring.datasource.username=shital  
spring.datasource.password=shital@123 
spring.jpa.hibernate.ddl-auto=create-drop  







package com.training.springboot.service;

import java.util.List;

import com.training.springboot.model.Employee;

public interface EmployeeService {
    List < Employee > getAllEmployees();
    void saveEmployee(Employee employee);
    Employee getEmployeeById(long id);
}
EmployeeServiceImpl.java class change
Override and implement "getEmployeeById()" method in EmployeeServiceImpl class like:
@Override
public Employee getEmployeeById(long id) {
    Optional < Employee > optional = employeeRepository.findById(id);
    Employee employee = null;
    if (optional.isPresent()) {
        employee = optional.get();
    } else {
        throw new RuntimeException(" Employee not found for id :: " + id);
    }
    return employee;
}



The complete code:
package com.training.springboot.service;

import java.util.List;
import java.util.Optional;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Service;

import com.training.springboot.model.Employee;
import com.training.springboot.repository.EmployeeRepository;

@Service
public class EmployeeServiceImpl implements EmployeeService {

    @Autowired
    private EmployeeRepository employeeRepository;

    @Override
    public List < Employee > getAllEmployees() {
        return employeeRepository.findAll();
    }

    @Override
    public void saveEmployee(Employee employee) {
        this.employeeRepository.save(employee);
    }

    @Override
    public Employee getEmployeeById(long id) {
        Optional < Employee > optional = employeeRepository.findById(id);
        Employee employee = null;
        if (optional.isPresent()) {
            employee = optional.get();
        } else {
            throw new RuntimeException(" Employee not found for id :: " + id);
        }
        return employee;
    }
}
EmployeeController changes
Add following method in EmployeeController class:
@GetMapping("/showFormForUpdate/{id}")
public String showFormForUpdate(@PathVariable ( value = "id") long id, Model model) {
 
 // get employee from the service
 Employee employee = employeeService.getEmployeeById(id);
 
 // set employee as a model attribute to pre-populate the form
 model.addAttribute("employee", employee);
 return "update_employee";
}
The complete code:
package net.javaguides.springboot.controller;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.PathVariable;
import org.springframework.web.bind.annotation.PostMapping;

import net.javaguides.springboot.model.Employee;
import net.javaguides.springboot.service.EmployeeService;

@Controller
public class EmployeeController {

    @Autowired
    private EmployeeService employeeService;

    // display list of employees
    @GetMapping("/")
    public String viewHomePage(Model model) {
        model.addAttribute("listEmployees", employeeService.getAllEmployees());
        return "index";
    }

    @GetMapping("/showNewEmployeeForm")
    public String showNewEmployeeForm(Model model) {
        // create model attribute to bind form data
        Employee employee = new Employee();
        model.addAttribute("employee", employee);
        return "new_employee";
    }

    @PostMapping("/saveEmployee")
    public String saveEmployee(@ModelAttribute("employee") Employee employee) {
        // save employee to database
        employeeService.saveEmployee(employee);
        return "redirect:/";
    }

    @GetMapping("/showFormForUpdate/{id}")
    public String showFormForUpdate(@PathVariable(value = "id") long id, Model model) {

        // get employee from the service
        Employee employee = employeeService.getEmployeeById(id);

        // set employee as a model attribute to pre-populate the form
        model.addAttribute("employee", employee);
        return "update_employee";
    }
}
2. Front-end changes
Add below button in actions column:
<td> <a th:href="@{/showFormForUpdate/{id}(id=${employee.id})}" class="btn btn-primary">Update</a></td>
The complete code:
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">

<head>
    <meta charset="ISO-8859-1">
    <title>Employee Management System</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">

</head>

<body>

    <div class="container my-2">
        <h1>Employees List</h1>

        <a th:href="@{/showNewEmployeeForm}" class="btn btn-primary btn-sm mb-3"> Add Employee </a>

        <table border="1" class="table table-striped table-responsive-md">
            <thead>
                <tr>
                    <th>Employee First Name</th>
                    <th>Employee Last Name</th>
                    <th>Employee Email</th>
                    <th>Actions</th>
                </tr>
            </thead>
            <tbody>
                <tr th:each="employee : ${listEmployees}">
                    <td th:text="${employee.firstName}"></td>
                    <td th:text="${employee.lastName}"></td>
                    <td th:text="${employee.email}"></td>
                    <td><a th:href="@{/showFormForUpdate/{id}(id=${employee.id})}" class="btn btn-primary">Update</a></td>
                </tr>
            </tbody>
        </table>
    </div>
</body>
</html>
Create update_employee.html
Create update_employee.html file under "resources/templates" folder and add the following content to it:
<!DOCTYPE html>
<html lang="en" xmlns:th="http://www.thymeleaf.org">

<head>
    <meta charset="ISO-8859-1">
    <title>Employee Management System</title>

    <link rel="stylesheet" href="https://stackpath.bootstrapcdn.com/bootstrap/4.1.3/css/bootstrap.min.css" integrity="sha384-MCw98/SFnGE8fJT3GXwEOngsV7Zt27NXFoaoApmYm81iuXoPkFOJwJ8ERdknLPMO" crossorigin="anonymous">
</head>

<body>
    <div class="container">
        <h1>Employee Management System</h1>
        <hr>
        <h2>Update Employee</h2>

        <form action="#" th:action="@{/saveEmployee}" th:object="${employee}" method="POST">

            <!-- Add hidden form field to handle update -->
            <input type="hidden" th:field="*{id}" />

            <input type="text" th:field="*{firstName}" class="form-control mb-4 col-4">

            <input type="text" th:field="*{lastName}" class="form-control mb-4 col-4">

            <input type="text" th:field="*{email}" class="form-control mb-4 col-4">

            <button type="submit" class="btn btn-info col-2"> Update Employee</button>
        </form>

        <hr>

        <a th:href="@{/}"> Back to Employee List</a>
    </div>
</body>

</html>




package com.example.demo;

import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import org.springframework.stereotype.Controller;
import org.springframework.ui.Model;
import org.springframework.web.bind.annotation.GetMapping;
import org.springframework.web.bind.annotation.ModelAttribute;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.servlet.ModelAndView;

@Controller
public class EmployeeController {

	private List<String> tasks = Arrays.asList("a", "b", "c", "d", "e", "f", "g");

	private static ArrayList<Employee> empList=new ArrayList<Employee>();
	static {
		empList.add(new Employee(101,"EShan",10000));
		empList.add(new Employee(102,"Tanisha",20000));
		empList.add(new Employee(103,"Manish",30000));
		empList.add(new Employee(104,"Anand",40000));
		empList.add(new Employee(105,"Paresh",50000));
	}
	@GetMapping("/employee")
	public String getEmployeeDetails(Model model) {
		model.addAttribute("message", "This is message from Controller");

		model.addAttribute("tasks", tasks);
		model.addAttribute("empList",empList);
		return "employee";
	}


	@RequestMapping(value="/save", method=RequestMethod.POST)    
	public ModelAndView save(@ModelAttribute Employee employee)  
	{    
		ModelAndView modelAndView = new ModelAndView();    
		modelAndView.setViewName("save-employee");        
		modelAndView.addObject("employee", employee);      
		return modelAndView;    
	}    

}








<!DOCTYPE HTML>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring Boot Thymeleaf</title>
    <link rel="stylesheet" type="text/css" href="./css/style1.css">
</head>
<body>


<form action="save" method="post">    
<table>    
<tr>    
<td><label for="empId">Employee id</label></td>    
<td><input type="text" name="empId"></input></td>    
 </tr>    
<tr>    
<td><label for="name">Name</label></td>    
<td><input type="text" name="name"></input></td>    
</tr>
<tr>    
<td><label for="salary">Salary</label></td>    
<td><input type="text" name="salary"></input></td>    
</tr>

<tr>    
<td></td>    
<td><input type="submit" value="Submit"></input></td>    
</tr>    
</table>    
</form>    


</body>
</html>





package com.training.springbootthymeleafviewexample.controller;

public class User   
{    
	String name;    
	String email;    
	public String getName()   
	{    
		return name;    
	}    
	public void setName(String name)   
	{    
		this.name = name;    
	}    
	public String getEmail()   
	{    
		return email;    
	}    
	public void setEmail(String email)   
	{    
		this.email = email;    
	}    
}    


2] 

package com.training.springbootthymeleafviewexample.controller;

import org.springframework.web.bind.annotation.ModelAttribute;    
import org.springframework.web.bind.annotation.RequestMapping;    
import org.springframework.web.bind.annotation.RequestMethod;    
import org.springframework.web.servlet.ModelAndView;    
import org.springframework.stereotype.Controller;    
@Controller    
public class DemoController   
{    
@RequestMapping("/")    
public String index()  
{    
return"index";    
}    
@RequestMapping(value="/save", method=RequestMethod.POST)    
public ModelAndView save(@ModelAttribute User user)  
{    
ModelAndView modelAndView = new ModelAndView();    
modelAndView.setViewName("user-data");        
modelAndView.addObject("user", user);      
return modelAndView;    
}    
}


3] 

<html xmlns:th="https://thymeleaf.org">    
<table>    
<tr>    
<td><h4>User Name: </h4></td>    
<td><h4 th:text="${user.name}"></h4></td>    
</tr>    
<tr>    
<td><h4>Email ID: </h4></td>    
<td><h4 th:text="${user.email}"></h4></td>    
</tr>    
</table>    
</html>  

4] 

<html lang="en">    
<head>    
<title>Index Page</title>    
</head>    
<body>    
<form action="save" method="post">    
<table>    
<tr>    
<td><label for="user-name">User Name</label></td>    
<td><input type="text" name="name"></input></td>    
 </tr>    
<tr>    
<td><label for="email">Email</label></td>    
<td><input type="text" name="email"></input></td>    
</tr>    
<tr>    
<td></td>    
<td><input type="submit" value="Submit"></input></td>    
</tr>    
</table>    
</form>    
</body>    
</html>  

5] 


spring.thymeleaf.cache=false  
spring.thymeleaf.suffix: .html  

6] 
package com.training.springbootthymeleafviewexample;

import org.springframework.boot.SpringApplication;
import org.springframework.boot.autoconfigure.SpringBootApplication;

@SpringBootApplication
public class SpringBootThymeleafViewExampleApplication {

	public static void main(String[] args) {
		SpringApplication.run(SpringBootThymeleafViewExampleApplication.class, args);
	}

}






<!DOCTYPE HTML>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring Boot Thymeleaf</title>
    <link rel="stylesheet" type="text/css" href="./css/style1.css">
</head>
<body>
<h1>Employee information to be displayed </h1>
<p th:text="${message}"></p>
</body>
</html>




package com.example.demo;

import org.springframework.stereotype.Controller;
import org.springframework.web.bind.annotation.GetMapping;

@Controller
public class EmployeeController {

	@GetMapping("/employee")
	public String getEmployeeDetails() {
		return "employee";
	}
}









<!DOCTYPE HTML>
<html lang="en" xmlns:th="http://www.thymeleaf.org">
<head>
    <meta charset="utf-8">
    <meta name="viewport" content="width=device-width, initial-scale=1, shrink-to-fit=no">
    <title>Spring Boot Thymeleaf</title>
</head>
<body>
<h1>Employee information to be displayed </h1>

</body>
</html>











<dependency>
      <groupId>org.springframework.boot</groupId>
      <artifactId>spring-boot-starter-thymeleaf</artifactId>
    </dependency>
    
    
    
    
    
    
    
    

<?xml version="1.0" encoding="UTF-8"?> 
<Configuration>   
	<Appenders>     
		<Console name="Console" target="SYSTEM_OUT">       
			<PatternLayout pattern="[log4j] %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n"/>     
		</Console>
	</Appenders>
	<Loggers>
		<!-- LOG everything at INFO level -->     
		<Root level="info">
			<AppenderRef ref="Console" />
		</Root>
		<!-- LOG "com.example" at TRACE level -->
		<Logger name="com.example" level="trace">
		</Logger>
	</Loggers>
</Configuration>








Let's see how to include a Logback configuration with a different color and logging pattern, with separate specifications for console and file output, and with a decent rolling policy to avoid generating huge log files.
First of all, we should go toward a solution which allows handling our logging settings alone, instead of polluting application.properties, which is commonly used for many other application settings.
When a file in the classpath has one of the following names, Spring Boot will automatically load it over the default configuration:
logback-spring.xml
logback.xml
logback-spring.groovy
logback.groovy








<?xml version="1.0" encoding="UTF-8"?>
<configuration>
  <appender name="Console" class="ch.qos.logback.core.ConsoleAppender">
    <layout class="ch.qos.logback.classic.PatternLayout">
      <Pattern>
        %d{yyyy-MM-dd HH:mm:ss} [%thread] %-5level %logger{36} - %msg%n
      </Pattern>
    </layout>
  </appender>

  <root level="info">
    <appender-ref ref="Console" />
  </root>

  <!-- Log everything at the TRACE level -->
  <logger name="com.example" level="trace" additivity="false">
    <appender-ref ref="Console" />
  </logger>
</configuration>





# Pattern:
 
logging.pattern.console=%d{yy-MMMM-dd HH:mm:ss:SSS} %5p %t %c{2}:%L - %m%n
 
# Output:
 
18-January-17 02:21:20:317  WARN http-nio-8080-exec-1 o.o.s.c.MainController:22 - This is WARN
18-January-17 02:21:20:320 ERROR http-nio-8080-exec-1 o.o.s.c.MainController:23 - This is ERROR

                
                
                


# Pattern:
 
logging.pattern.console= %d{dd/MM/yyyy HH:mm:ss.SSS} %-5level [%thread] %logger{115} - %msg%n
 
# Output:
 
17/01/2018 02:15:15.052 WARN  [http-nio-8080-exec-1] org.o7planning.sblogging.controller.MainController - This is WARN
17/01/2018 02:15:15.054 ERROR [http-nio-8080-exec-1] org.o7planning.sblogging.controller.MainController - This is ERROR


        
        
        
        



And you can change  "Logging pattern" by customizing the following properties:
logging.pattern.console
logging.pattern.file

# Pattern:
 
logging.pattern.console= %d{yyyy-MMM-dd HH:mm:ss.SSS} %-5level [%thread] %logger{15} - %msg%n
 
# Output:
 
2018-Jan-17 01:58:49.958 WARN  [http-nio-8080-exec-1] o.o.s.c.MainController - This is WARN
2018-Jan-17 01:58:49.960 ERROR [http-nio-8080-exec-1] o.o.s.c.MainController - This is ERROR

        
        
        
        


How to use CommandLineRunner

You can use CommandLineRunner interface in three ways:

1) Using CommandLineRunner as @Component
2) Implement CommandLineRunner in @SpringBootApplication
3) Using CommandLineRunner as Bean




-----------------------------------------------26/7-------------------------------------

Spring Boot JPA is a Java specification for managing relational data in Java applications. It allows us to access and persist data between Java object/ class and relational database. JPA follows Object-Relation Mapping (ORM). It is a set of interfaces. It also provides a runtime EntityManager API for processing queries and transactions on the objects against the database. It uses a platform-independent object-oriented query language JPQL (Java Persistent Query Language).
In the context of persistence, it covers three areas:
The Java Persistence API
Object-Relational metadata
The API itself, defined in the persistence package
JPA is not a framework. It defines a concept that can be implemented by any framework.


JPA is simpler, cleaner, and less labor-intensive than JDBC, SQL, and hand-written mapping. JPA is suitable for non-performance oriented complex applications. The main advantage of JPA over JDBC is that, in JPA, data is represented by objects and classes while in JDBC data is represented by tables and records. It uses POJO to represent persistent data that simplifies database programming. There are some other advantages of JPA:
JPA avoids writing DDL in a database-specific dialect of SQL. Instead of this, it allows mapping in XML or using Java annotations.
JPA allows us to avoid writing DML in the database-specific dialect of SQL.
JPA allows us to save and load Java objects and graphs without any DML language at all.
When we need to perform queries JPQL, it allows us to express the queries in terms of Java entities rather than the (native) SQL table and columns.


There are following features of JPA:
It is a powerful repository and custom object-mapping abstraction.
It supports for cross-store persistence. It means an entity can be partially stored in MySQL and Neo4j (Graph Database Management System).
It dynamically generates queries from queries methods name.
The domain base classes provide basic properties.
It supports transparent auditing.
Possibility to integrate custom repository code.
It is easy to integrate with Spring Framework with the custom namespace.


JPA is a source to store business entities as relational entities. It shows how to define a POJO as an entity and how to manage entities with relation.
The following figure describes the class-level architecture of JPA that describes the core classes and interfaces of JPA that is defined in the javax persistence package. The JPA architecture contains the following units:
Persistence: It is a class that contains static methods to obtain an EntityManagerFactory instance.
EntityManagerFactory: It is a factory class of EntityManager. It creates and manages multiple instances of EntityManager.
EntityManager: It is an interface. It controls the persistence operations on objects. It works for the Query instance.
Entity: The entities are the persistence objects stores as a record in the database.
Persistence Unit: It defines a set of all entity classes. In an application, EntityManager instances manage it. The set of entity classes represents the data contained within a single data store.
EntityTransaction: It has a one-to-one relationship with the EntityManager class. For each EntityManager, operations are maintained by EntityTransaction class.
Query: It is an interface that is implemented by each JPA vendor to obtain relation objects that meet the criteria.



JPA Class Relationship
The relationship between EntityManager and EntiyTransaction is one-to-one. There is an EntityTransaction instance for each EntityManager operation.
The relationship between EntityManageFactory and EntiyManager is one-to-many. It is a factory class to EntityManager instance.
The relationship between EntityManager and Query is one-to-many. We can execute any number of queries by using an instance of EntityManager class.
The relationship between EntityManager and Entity is one-to-many. An EntityManager instance can manage multiple Entities.


-------------------------27/07-----------------------------------------------------
REST stands for REpresentational State Transfer. REST specifies a set of architectural constraints. Any service which satisfies these constraints is called RESTful Service.
The five important constraints for RESTful Web Service are
Client - Server : There should be a service producer and a service consumer.
The interface (URL) is uniform and exposing resources.
The service is stateless.
The service results should be Cacheable. HTTP cache, for example.
Service should assume a Layered architecture. Client should not assume direct connection to server - it might be getting info from a middle layer - cache.

Spring Boot RestTemplate shows how to use RestTemplate to create synchronous HTTP requests in a Spring application.
RestTemplate is a synchronous client to perform HTTP requests. It uses a simple, template method API over underlying HTTP client libraries such as the JDK HttpURLConnection, Apache HttpComponents, and others.

Since Spring 1.5.0, a new client WebClient is available that can be use do create both synchronous and asynchronous requests. In the future releases, RestTemplate will be deprecated in favour of WebClient.
Rest Template is used to create applications that consume RESTful Web Services. You can use the exchange() method to consume the web services for all HTTP methods. The code given below shows how to create Bean for Rest Template to auto wiring the Rest Template object.